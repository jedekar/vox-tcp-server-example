enum EXIT_FAILURE = -1;
enum EXIT_SUCCESS = 0;

enum AF_INET = 2;
enum PF_INET = 2;

enum SOCK_STREAM = 1;

enum IPPROTO_TCP = 6;

enum INADDR_ANY = 0;

enum SHUT_RDWR = 2;

enum u32 stdout = 1;
enum u32 stderr = 2;

struct SockAddrIn {
	i16 sin_family;
	u16 sin_port;
	InAddr sin_addr;
	i8[8] sin_zero;
}

struct InAddr {
	u32 s_addr;
}

@extern(syscall, 60)
noreturn exit(i32 code);

@extern(syscall, 41)
i32 socket(i32 domain, i32 type, i32 proto);

@extern(syscall, 1)
void write(u32 fd, u8* buf, u64 count);

@extern(syscall, 49)
i32 bind(i32 fd, SockAddrIn* addr, u64 len);

@extern(syscall, 3)
i32 close(i32 fd);

@extern(syscall, 50)
i32 listen(i32 fd, i32 backlog);

@extern(syscall, 43)
i32 accept(i32 fd, SockAddrIn* addr, u64* len);

@extern(syscall, 48)
i32 shutdown(i32 fd, i32 how);

void perror(u8[] str) {
	write(stderr, str.ptr, str.length);
	u8[] nl = "\n";
	write(stderr, nl.ptr, nl.length);
}

void println(u8[] str) {
	write(stdout, str.ptr, str.length);
	u8[] nl = "\n";
	write(stdout, nl.ptr, nl.length);
}

u16 htons(u16 hostshort) {
	return ((hostshort & 0xFF) << 8) | ((hostshort & 0xFF00) >> 8);
}

u32 htonl(u32 hostlong) {
	return ((hostlong & 0xFF) << 24) | ((hostlong & 0xFF00) << 8) | ((hostlong & 0xFF0000) >> 8) | ((hostlong & 0xFF000000) >> 24);
}

